"Asm.fif" include
// automatically generated from `/home/irtasam/.config/toncli/func-libs/stdlib.func` `/home/irtasam/.config/toncli/func-libs/error_codes.func` `/home/irtasam/.config/toncli/func-libs/math.func` `/home/irtasam/xp-the-open-network/func/burner.func` 
PROGRAM{
  DECLPROC power
  DECLPROC sqrt
  DECLPROC avg
  DECLPROC exp
  DECLPROC log2
  DECLPROC load_data
  DECLPROC send_nft
  DECLPROC setup
  DECLPROC recv_internal
  DECLPROC recv_external
  85143 DECLMETHOD seqno
  103837 DECLMETHOD get_sender_address
  78748 DECLMETHOD get_public_key
  power PROCREF:<{
    //  x exponent
    OVER	//  x exponent x
    0 EQINT	//  x exponent _3
    IFJMP:<{	//  x exponent
      2DROP	// 
      0 PUSHINT	//  _4=0
    }>	//  x exponent
    DUP	//  x exponent exponent
    0 EQINT	//  x exponent _6
    IFJMP:<{	//  x exponent
      2DROP	// 
      1 PUSHINT	//  _7=1
    }>	//  x exponent
    OVER	//  x counter result
    WHILE:<{
      OVER	//  x counter result counter
      1 GTINT	//  x counter result _11
    }>DO<{	//  x counter result
      s2 PUSH	//  x counter result x
      MUL	//  x counter result
      SWAP	//  x result counter
      DEC	//  x result counter
      SWAP	//  x counter result
    }>	//  x counter result
    2 1 BLKDROP2	//  result
  }>
  sqrt PROCREF:<{
    //  x
    DUP	//  x x
    0 EQINT	//  x _2
    IFJMP:<{	//  x
      DROP	// 
      0 PUSHINT	//  _3=0
    }>	//  x
    DUP	//  x x
    4 LESSINT	//  x _5
    IFJMP:<{	//  x
      DROP	// 
      1 PUSHINT	//  _6=1
    }>	//  x
    DUP	//  x x
    INC	//  x _9
    1 RSHIFT#	//  x z
    OVER	//  x z y
    WHILE:<{
      2DUP	//  x z y z y
      LESS	//  x z y _13
    }>DO<{	//  x z y
      DROP	//  x z
      s0 s1 s0 PUSH3	//  x z y x z
      DIV	//  x z y _14
      ROT	//  x y _14 z
      ADD	//  x y _15
      1 RSHIFT#	//  x y z
      SWAP	//  x z y
    }>	//  x z y
    2 1 BLKDROP2	//  y
  }>
  avg PROCREF:<{
    //  x y
    ADD	//  _2
    1 RSHIFT#	//  _4
  }>
  exp PROCREF:<{
    //  x
    DUP	//  x x
    -1 GTINT	//  x _2
    IF:<{	//  x
      POW2	//  _3
    }>ELSE<{	//  x
      1 PUSHINT	//  x _6=1
      SWAP	//  _6=1 x
      NEGATE	//  _6=1 _8
      RSHIFT	//  _3
    }>
  }>
  log2 PROCREF:<{
    //  x
    0 PUSHINT	//  x n=0
    7 PUSHPOW2	//  x n=0 _3=128
    exp INLINECALLDICT	//  x n=0 _4
    s2 s(-1) PUXC	//  x n=0 x _4
    GEQ	//  x n=0 _5
    IF:<{	//  x n=0
      DROP	//  x
      128 RSHIFT#	//  x
      7 PUSHPOW2	//  x n
    }>	//  x n
    64 PUSHINT	//  x n _10=64
    exp INLINECALLDICT	//  x n _11
    s2 s(-1) PUXC	//  x n x _11
    GEQ	//  x n _12
    IF:<{	//  x n
      SWAP	//  n x
      64 RSHIFT#	//  n x
      SWAP	//  x n
      64 ADDCONST	//  x n
    }>	//  x n
    32 PUSHINT	//  x n _17=32
    exp INLINECALLDICT	//  x n _18
    s2 s(-1) PUXC	//  x n x _18
    GEQ	//  x n _19
    IF:<{	//  x n
      SWAP	//  n x
      32 RSHIFT#	//  n x
      SWAP	//  x n
      32 ADDCONST	//  x n
    }>	//  x n
    16 PUSHINT	//  x n _24=16
    exp INLINECALLDICT	//  x n _25
    s2 s(-1) PUXC	//  x n x _25
    GEQ	//  x n _26
    IF:<{	//  x n
      SWAP	//  n x
      16 RSHIFT#	//  n x
      SWAP	//  x n
      16 ADDCONST	//  x n
    }>	//  x n
    8 PUSHINT	//  x n _31=8
    exp INLINECALLDICT	//  x n _32
    s2 s(-1) PUXC	//  x n x _32
    GEQ	//  x n _33
    IF:<{	//  x n
      SWAP	//  n x
      8 RSHIFT#	//  n x
      SWAP	//  x n
      8 ADDCONST	//  x n
    }>	//  x n
    4 PUSHINT	//  x n _38=4
    exp INLINECALLDICT	//  x n _39
    s2 s(-1) PUXC	//  x n x _39
    GEQ	//  x n _40
    IF:<{	//  x n
      SWAP	//  n x
      4 RSHIFT#	//  n x
      SWAP	//  x n
      4 ADDCONST	//  x n
    }>	//  x n
    2 PUSHINT	//  x n _45=2
    exp INLINECALLDICT	//  x n _46
    s2 s(-1) PUXC	//  x n x _46
    GEQ	//  x n _47
    IF:<{	//  x n
      SWAP	//  n x
      2 RSHIFT#	//  n x
      SWAP	//  x n
      2 ADDCONST	//  x n
    }>	//  x n
    1 PUSHINT	//  x n _52=1
    exp INLINECALLDICT	//  x n _53
    s1 s2 XCHG	//  n x _53
    GEQ	//  n _54
    IF:<{	//  n
      INC	//  n
    }>	//  n
  }>
  load_data PROCREF:<{
    // 
    c4 PUSH	//  _1
    CTOS	//  ds
    32 LDU	//  _3 ds
    32 LDU	//  _3 _6 ds
    256 LDU	//  _3 _6 _9 ds
    8 LDU	//  _3 _6 _9 _12 ds
    256 LDU	//  _3 _6 _9 _12 _27 _26
    DROP	//  _3 _6 _9 _12 _15
  }>
  send_nft PROC:<{
    //  in_msg_body
    LDMSGADDR	//  nft_address_arg in_msg_body
    LDMSGADDR	//  nft_address_arg to in_msg_body
    LDVARUINT16	//  nft_address_arg to _69 _68
    DROP	//  nft_address_arg to amount
    s0 s2 XCHG	//  amount to nft_address_arg
    REWRITESTDADDR	//  amount to _70 _71
    NIP	//  amount to parsed_nft_address
    0 PUSHINT	//  amount to parsed_nft_address _14=0
    s0 s0 PUSH2	//  amount to parsed_nft_address _14=0 _15=0 _16=0
    0x5fcc3d14 PUSHINT	//  amount to parsed_nft_address _14=0 _15=0 _16=0 _17
    NEWC	//  amount to parsed_nft_address _14=0 _15=0 _16=0 _17 _18
    32 STU	//  amount to parsed_nft_address _14=0 _15=0 _16=0 _20
    64 STU	//  amount to parsed_nft_address _14=0 _15=0 _22
    s4 PUSH	//  amount to parsed_nft_address _14=0 _15=0 _22 to
    STSLICER	//  amount to parsed_nft_address _14=0 _15=0 _23
    s0 s4 XCHG2	//  amount _15=0 parsed_nft_address _14=0 _23 to
    STSLICER	//  amount _15=0 parsed_nft_address _14=0 _24
    s1 s3 XCHG	//  amount _14=0 parsed_nft_address _15=0 _24
    1 STI	//  amount _14=0 parsed_nft_address _26
    s2 PUSH	//  amount _14=0 parsed_nft_address _26 _27=0
    STVARUINT16	//  amount _14=0 parsed_nft_address _28
    s1 s2 XCHG	//  amount parsed_nft_address _14=0 _28
    1 STI	//  amount parsed_nft_address _30
    ENDC	//  amount parsed_nft_address _31
    1 PUSHINT	//  amount parsed_nft_address _31 _32=1
    0 PUSHINT	//  amount parsed_nft_address _31 _32=1 _33=0
    2 PUSHINT	//  amount parsed_nft_address _31 _32=1 _33=0 _34=2
    24 PUSHINT	//  amount parsed_nft_address _31 _32=1 _33=0 _34=2 _35=24
    NEWC	//  amount parsed_nft_address _31 _32=1 _33=0 _34=2 _35=24 _36
    6 STU	//  amount parsed_nft_address _31 _32=1 _33=0 _34=2 _38
    2 STU	//  amount parsed_nft_address _31 _32=1 _33=0 _40
    9 STU	//  amount parsed_nft_address _31 _32=1 _42
    s1 s3 XCHG	//  amount _32=1 _31 parsed_nft_address _42
    256 STU	//  amount _32=1 _31 _44
    s0 s3 XCHG2	//  _31 _32=1 _44 amount
    STVARUINT16	//  _31 _32=1 _45
    107 STU	//  _31 _59
    STREF	//  msg
    ENDC	//  _61
    1 PUSHINT	//  _61 _62=1
    SENDRAWMSG
  }>
  setup PROC:<{
    //  in_msg_body
    load_data INLINECALLDICT	//  in_msg_body _33 _34 _35 _36 _37
    DROP
    NIP	//  in_msg_body seqno_ subwallet is_initialized
    39 THROWIF
    s0 s2 XCHG	//  subwallet seqno_ in_msg_body
    LDMSGADDR	//  subwallet seqno_ sender_address in_msg_body
    256 LDU	//  subwallet seqno_ sender_address _41 _40
    DROP	//  subwallet seqno_ sender_address public_key
    SWAP	//  subwallet seqno_ public_key sender_address
    REWRITESTDADDR	//  subwallet seqno_ public_key _42 _43
    NIP	//  subwallet seqno_ public_key sender_address_int
    1 PUSHINT	//  subwallet seqno_ public_key sender_address_int _19=1
    s0 s3 XCHG
    NEWC	//  subwallet _19=1 public_key sender_address_int seqno_ _20
    32 STU	//  subwallet _19=1 public_key sender_address_int _22
    s1 s4 XCHG	//  sender_address_int _19=1 public_key subwallet _22
    32 STU	//  sender_address_int _19=1 public_key _24
    256 STU	//  sender_address_int _19=1 _26
    8 STU	//  sender_address_int _28
    256 STU	//  _30
    ENDC	//  _31
    c4 POP
  }>
  recv_internal PROC:<{
    //  my_balance msg_value in_msg_full in_msg_body
    2 2 BLKDROP2	//  in_msg_full in_msg_body
    DUP	//  in_msg_full in_msg_body in_msg_body
    SEMPTY	//  in_msg_full in_msg_body _4
    IFJMP:<{	//  in_msg_full in_msg_body
      2DROP	// 
    }>	//  in_msg_full in_msg_body
    32 LDU	//  in_msg_full op in_msg_body
    OVER	//  in_msg_full op in_msg_body op
    0 EQINT	//  in_msg_full op in_msg_body _10
    IFJMP:<{	//  in_msg_full op in_msg_body
      2 1 BLKDROP2	//  in_msg_body
      setup CALLDICT
    }>	//  in_msg_full op in_msg_body
    SWAP	//  in_msg_full in_msg_body op
    1 EQINT	//  in_msg_full in_msg_body _13
    IFJMP:<{	//  in_msg_full in_msg_body
      load_data INLINECALLDICT	//  in_msg_full in_msg_body _36 _37 _38 _39 _40
      4 1 BLKDROP2	//  in_msg_full in_msg_body sender_address
      s0 s2 XCHG	//  sender_address in_msg_body in_msg_full
      CTOS	//  sender_address in_msg_body cs
      4 PUSHINT	//  sender_address in_msg_body cs _23=4
      SDSKIPFIRST	//  sender_address in_msg_body cs
      LDMSGADDR	//  sender_address in_msg_body _42 _41
      DROP	//  sender_address in_msg_body _27
      REWRITESTDADDR	//  sender_address in_msg_body _43 _44
      NIP	//  sender_address in_msg_body sender
      s1 s2 XCHG	//  in_msg_body sender_address sender
      EQUAL	//  in_msg_body _31
      35 THROWIFNOT
      send_nft INLINECALLDICT
    }>	//  in_msg_full in_msg_body
    2DROP	// 
  }>
  recv_external PROC:<{
    //  in_msg
    9 PUSHPOW2	//  in_msg _3=512
    LDSLICEX	//  signature in_msg
    DUP	//  signature in_msg cs
    32 LDU	//  signature in_msg _9 cs
    32 LDU	//  signature in_msg _9 _12 cs
    32 LDU	//  signature in_msg subwallet_id valid_until msg_seqno cs
    s0 s2 XCHG
    NOW	//  signature in_msg subwallet_id cs msg_seqno valid_until _19
    LEQ	//  signature in_msg subwallet_id cs msg_seqno _20
    35 THROWIF
    c4 PUSH	//  signature in_msg subwallet_id cs msg_seqno _23
    CTOS	//  signature in_msg subwallet_id cs msg_seqno ds
    32 LDU	//  signature in_msg subwallet_id cs msg_seqno _28 ds
    32 LDU	//  signature in_msg subwallet_id cs msg_seqno _28 _31 ds
    256 LDU	//  signature in_msg subwallet_id cs msg_seqno stored_seqno stored_subwallet public_key ds
    ENDS
    s3 s2 XCPU	//  signature in_msg subwallet_id cs public_key stored_seqno stored_subwallet msg_seqno stored_seqno
    EQUAL	//  signature in_msg subwallet_id cs public_key stored_seqno stored_subwallet _39
    33 THROWIFNOT
    s4 s4 XCPU	//  signature in_msg stored_subwallet cs public_key stored_seqno subwallet_id stored_subwallet
    EQUAL	//  signature in_msg stored_subwallet cs public_key stored_seqno _42
    34 THROWIFNOT
    s0 s4 XCHG	//  signature stored_seqno stored_subwallet cs public_key in_msg
    HASHSU	//  signature stored_seqno stored_subwallet cs public_key _45
    s0 s5 s5 XC2PU	//  public_key stored_seqno stored_subwallet cs _45 signature public_key
    CHKSIGNU	//  public_key stored_seqno stored_subwallet cs _46
    35 THROWIFNOT
    ACCEPT
    s0 s2 XCHG	//  public_key cs stored_subwallet stored_seqno
    INC	//  public_key cs stored_subwallet _50
    NEWC	//  public_key cs stored_subwallet _50 _51
    32 STU	//  public_key cs stored_subwallet _53
    32 STU	//  public_key cs _55
    s1 s2 XCHG	//  cs public_key _55
    256 STU	//  cs _57
    ENDC	//  cs _58
    c4 POP
    COMMIT	//  cs
    WHILE:<{
      DUP	//  cs cs
      SREFS	//  cs _63
    }>DO<{	//  cs
      8 LDU	//  mode cs
      LDREF	//  mode _68 cs
      s0 s2 XCHG	//  cs _68 mode
      SENDRAWMSG
    }>	//  cs
    DROP	// 
  }>
  seqno PROC:<{
    // 
    c4 PUSH	//  _0
    CTOS	//  _1
    32 PLDU	//  _3
  }>
  get_sender_address PROC:<{
    // 
    load_data INLINECALLDICT	//  _6 _7 _8 _9 _10
    4 1 BLKDROP2	//  sender_address
  }>
  get_public_key PROC:<{
    // 
    load_data INLINECALLDICT	//  _6 _7 _8 _9 _10
    s2 s4 XCHG
    4 BLKDROP	//  public_key
  }>
}END>c
